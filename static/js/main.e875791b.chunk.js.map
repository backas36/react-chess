{"version":3,"sources":["useBoard.js","Square.js","GameInfo.js","App.js","index.js"],"names":["countChess","board","x","y","directionX","directionY","currentChess","tempX","tempY","total","useBoard","useState","Array","fill","setBoard","winner","setWinner","currentX","useRef","currentY","isWhiteTurn","useEffect","current","getWinner","handleChessClick","value","map","row","col","handleUpdateBoard","SquareStyle","styled","div","props","$value","$isWhiteTurn","Square","rowIndex","colIndex","onClick","Info","Button","button","Player","GameInfo","className","window","location","reload","Board","Col","Row","App","currentRow","currentCol","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e875791b.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react'\n\nconst countChess = (board, x, y, directionX, directionY) => {\n  const currentChess = board[y][x]\n  let tempX = x + directionX\n  let tempY = y + directionY\n  let total = 0\n\n  while (board[tempY] && board[tempY][tempX] === currentChess) {\n    tempX += directionX\n    tempY += directionY\n    total++\n  }\n  return total\n}\n\nconst getWinner = (board, x, y) => {\n  if (\n    countChess(board, x, y, 0, 1) + countChess(board, x, y, 0, -1) >= 4 ||\n    countChess(board, x, y, 1, 0) + countChess(board, x, y, -1, 0) >= 4 ||\n    countChess(board, x, y, 1, 1) + countChess(board, x, y, -1, -1) >= 4 ||\n    countChess(board, x, y, 1, -1) + countChess(board, x, y, -1, 1) >= 4\n  ) {\n    return board[y][x]\n  }\n}\n\n\n\nconst useBoard = () => {\n  const [board, setBoard] = useState(\n    Array(19).fill(Array(19).fill(null))\n  )\n\n  const [winner, setWinner] = useState(null)\n  const currentX = useRef()\n  const currentY = useRef()\n  const isWhiteTurn = useRef(false)\n\n\n\n  const handleUpdateBoard = (x, y) => {\n    setBoard(\n      board.map((row, currentY) => {\n        if (currentY !== y) return row\n\n        return row.map((col, currentX) => {\n\n          if (currentX !== x) return col\n\n          return isWhiteTurn.current ? 'white' : 'black'\n        })\n      }),\n    )\n  }\n\n  const handleChessClick = (x, y, value) => {\n    if (value || winner) return\n    currentX.current = x\n    currentY.current = y\n    handleUpdateBoard(x, y)\n    isWhiteTurn.current = !isWhiteTurn.current\n  }\n\n  useEffect(() => {\n    if (!currentX.current || !currentY.current) return\n\n    setWinner(getWinner(board, currentX.current, currentY.current))\n  }, [board])\n\n  return {\n    board,\n    winner,\n    isWhiteTurn,\n    handleChessClick\n  }\n}\n\n\nexport default useBoard","import styled from \"styled-components\"\n\nconst SquareStyle = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  position: relative;\n  z-index: 1;\n  transition: background-color .1s;\n\n  \n  ${props => props.$value && `\n     background-color:${props.$value};\n  `}\n\n  ${props => !props.$value && `\n    &:hover {\n      background-color: black;\n      ${props.$isWhiteTurn && `\n        background-color: white;\n        opacity:0.6;\n      `}\n      box-shadow: 3px 4px 4px 0px #505050;\n      opacity:0.6;\n\n    }\n  `}\n`\n\n\n\nconst Square = ({ rowIndex, colIndex, board, handleChessClick, winner, isWhiteTurn }) => {\n  const value = board[rowIndex][colIndex]\n\n  return (\n    <SquareStyle\n      rowIndex={rowIndex}\n      colIndex={colIndex}\n      onClick={() => handleChessClick(colIndex, rowIndex, value)}\n      $isWhiteTurn={isWhiteTurn}\n      $value={value}\n    >\n    </SquareStyle>\n  )\n}\n\nexport default Square\n","import styled from 'styled-components'\n\n\nconst Info = styled.div`\n  width: 200px;\n  text-align: center;\n`\nconst Button = styled.button`\n  border-radius: 6px;\n  border: 4px solid brown;\n  background-color: #dec3a1;\n  padding: 6px 12px;\n  cursor: pointer;\n  transition: all .2s;   \n  color:brown;\n  &:hover{\n    background-color: #DEB887;\n    color: azure;\n  }\n`\n\nconst Player = styled.div`\n  \n  background-color: #000;\n  ${props => props.$isWhiteTurn && `\n    background-color:#fff;\n  `}\n  box-shadow: 3px 4px 4px 0px #505050;\n\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  display: inline-block;\n  transform: translateY(25%);\n  margin-left:20px;\n\n`\n\n\nconst GameInfo = ({ isWhiteTurn, winner }) => {\n  return (\n    <Info>\n      <h1>五子棋</h1>\n      {!winner && (\n        <h3>Next player :\n          <Player $isWhiteTurn={isWhiteTurn.current} winner={winner}></Player>\n        </h3>\n      )}\n      {winner && (\n        <h3>Winner is  :\n          👍🏽 {winner === 'black' ? '黑色' : '白色'}\n        </h3>\n      )}\n\n\n      <Button className=\"btn-light\" onClick={() => window.location.reload()}>重來一次</Button>\n    </Info>\n  )\n}\n\nexport default GameInfo","import styled from 'styled-components'\n\nimport useBoard from './useBoard'\nimport Square from './Square'\nimport GameInfo from './GameInfo'\n\n\n\nconst Board = styled.div`\n  padding: 6px;\n  background-color: burlywood;\n  flex: 1;\n`\n\nconst Col = styled.div`\n  width: 30px;\n  height: 30px;\n  position: relative;\n\n  &::before{\n    content: \"\";\n    width: 30px;\n    background-color: #000;\n    position: absolute;\n    top: 9px;\n    left: 0;\n    height: 2px;\n  } \n\n  &::after {\n    content: \"\";\n    height: 30px;\n    background-color: #000;\n    position: absolute;\n    top: 0;\n    left: 9px;\n    width: 2px;\n  }\n`\nconst Row = styled.div`\n  display: flex;\n  margin: 0 auto;\n  justify-content: center;\n\n  &:first-child .col::after {\n    top: 9px;\n  }\n\n  &:last-child .col::after {\n    height: 10px;\n  }\n\n  & .col:first-child::before {\n    left: 9px;\n  }\n\n  & .col:last-child::before {\n    width: 10px;\n  }\n`\n\n\nconst App = () => {\n  const { board, winner, isWhiteTurn, handleChessClick } = useBoard()\n\n  return (\n    <>\n      <GameInfo isWhiteTurn={isWhiteTurn} winner={winner} />\n      <Board>\n        {board.map((row, currentRow) => {\n          return (\n            <Row key={currentRow}>\n              {row.map((col, currentCol) => {\n                return (\n                  <Col key={currentCol} className=\"col\">\n                    <Square\n                      rowIndex={currentRow}\n                      colIndex={currentCol}\n                      board={board}\n                      handleChessClick={handleChessClick}\n                      isWhiteTurn={isWhiteTurn.current}\n                      winner={winner}\n                    />\n                  </Col>\n                )\n              })}\n            </Row>\n          )\n        })}\n      </Board>\n    </>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './normalize.css'\nimport './index.css'\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}